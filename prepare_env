#!/bin/bash

set -e

# base="$(realpath "$(dirname "$0")")"
# base="${base%/*}"
# cd "$base"

if [[ -n "$W" ]]; then
  W=/w
fi

dtool=$(dirname $0)
cd "$dtool/../syntax-highlighting$W"
base="$PWD"

d=~/rawdisk2/sh
dhi="$d/org.kde.syntax-highlighting"
d+="$W"
mkdir -p "$d/b" "$d/src/quick"

errcode=0
if (( $# == 0 )); then
  ln -s "$base/data/syntax/" "$dhi" ||:
else
  mkdir -p "$dhi/syntax"
  cd data/syntax
  for f in "$@"; do
    if [[ ! -f "$f.xml" ]]; then
      echo "$f: file not found"
      ((++errcode))
      continue
    fi

    ln -s "$PWD/$f.xml" "$dhi/syntax" || ((++errcode))
  done
  cd ../..
fi

shopt -s extglob

ln -s "$base/"!(w|src|CMakeLists.txt) "$d"
ln -s "$base/src/"!(quick|CMakeLists.txt) "$d/src"
ln -s "$base/src/quick/"!(CMakeLists.txt) "$d/src/quick"

cd "$d"

sed 's#^find_package(ECM 5[^ ]\+ REQUIRED NO_MODULE)#find_package(ECM 5.84.0 REQUIRED NO_MODULE)#
     /^include(ECMAddQch)/d
     /^install(FILES /,/)/d
     /^ecm_install_po_files_as_qm/d
     /^ecm_set_disabled_deprecation_versions(/,/)/d
' "$base"/CMakeLists.txt > CMakeLists.txt

sed '/^ecm_qt_install_logging_categories/,/^)/d' \
  "$base"/src/CMakeLists.txt > src/CMakeLists.txt

sed 's/^ecm_add_qml_module.*/add_library(kquicksyntaxhighlightingplugin)/
     /^ecm_finalize_qml_module/d
' "$base"/src/quick/CMakeLists.txt > src/quick/CMakeLists.txt

cd b

declare bins=()

add_exe() {
  echo "${shebang}$2" > $1.sh
  bins+=($1.sh)
}

add_exe update-reference-data 'set -e
cd '"$PWD"'/autotests
for name in "$@" ; do
  file=(output/*.$name.ref)
  if [[ -r ${file[0]} ]]; then
    name="${file[0]:7:-4}"
  fi
  echo copy $name
  cp output/$name.ref '"$base"'/autotests/reference/ || continue
  cp html.output/$name.html html.output/$name.dark.html '"$base"'/autotests/html/
  cp folding.out/$name.fold '"$base"'/autotests/folding/
done'

# *.debug=true;kf.syntaxhighlighting.debug=true
vtbkate="QT_LOGGING_RULES='*.debug=true' exec ./bin/kate-syntax-highlighter --output-format=ansi256colors -b -t'My Breeze Dark'"
vtkate="${vtbkate/.\/bin\/}"
vtkate2="XDG_DATA_DIRS='"$d"' $vtkate"
shebang=$'#!/bin/sh\n'

declare -A m=(
  _ ''
  n  '--syntax-trace=format'
  r  '--syntax-trace=region'
  s  '--syntax-trace=format --syntax-trace=stackSize'
  t  '--syntax-trace=format --syntax-trace=context --syntax-trace=stackSize'
)

declare -A bm=(
  _ "XDG_DATA_DIRS='"$d"' $vtkate"
  k  "$vtkate"
  b  "$vtbkate"
)

for k1 in "${!m[@]}"; do
  for k2 in "${!bm[@]}"; do
    add_exe ${k2/_}${k1/_}hi  "${bm[$k2]} ${m[$k1]} \"\$@\""
    add_exe ${k2/_}${k1/_}ihi "${bm[$k2]} ${m[$k1]} --stdin -s \"\$@\""
  done
done

add_exe rlwrap "QT_LOGGING_RULES='*.debug=true' RLWRAP_HOME='$d' exec rlwrap ./unbuffered.sh \"\$@\""
add_exe kate "XDG_DATA_DIRS='$d' exec kate \"$@\""
add_exe validatehl "exec xmllint --noout --schema '$base'/data/schema/language.xsd \"\$@\""

add_exe unbuffered 'while read l ; do echo "$l" | "$@" ; done'
add_exe build 'exec cmake -DQT_MAJOR_VERSION=6 -DCMAKE_BUILD_TYPE=Release -DKSYNTAXHIGHLIGHTING_USE_GUI=OFF "$@" -G Ninja ..'
add_exe final './validatehl.sh syntax/* && ninja clean && ninja rebuild_cache && exec ./test.sh'

add_exe test "export QT_LOGGING_RULES='*.debug=true'
if (( \$# == 1 )); then
  ninja && XDG_DATA_DIRS='$d' exec ctest --output-on-failure --rerun-failed
else
  ninja && XDG_DATA_DIRS='$d' exec ctest --output-on-failure
fi"

add_exe increase_versions "exec '$dtool'/increase_version.lua \$(
  cd '$base'
  git diff --stat @..master | sed -E 's#^ data/(syntax/[^.]+.xml).*#\\1#;t;d'
)"

add_exe bench_hi "XDG_DATA_DIRS='$d' exec ./bin/highlighter_benchmark"
add_exe bench_repo "XDG_DATA_DIRS='$d' exec ./bin/repository_benchmark"
add_exe perf_hi "XDG_DATA_DIRS='$d' TMPDIR=\"\$PWD\" perfgraph.sh -r ./bin/highlighter_benchmark"

add_exe gdb 'if [[ ! -f qt.py ]]; then
  ln -s /usr/share/kdevgdb/printers/*.py .
  cat ~/.gdbinit /usr/share/kdevgdb/printers/gdbinit > gdbinit
fi
PYTHONPATH=$PWD exec gdb -q -ex source\ gdbinit -ex run --args "$@"'

chmod +x "${bins[@]}"

ln -s "$base"/autotests/input/ "$base"/data/syntax/ .

echo -e '\e[33m'
echo "cd $d/b"
echo './build'
echo './hi.sh input/<file>'
echo './test.sh'
echo './update-reference-data.sh <lang>'
echo

exit $errcode
