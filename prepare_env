#!/usr/bin/env bash

set -e

# base="$(realpath "$(dirname "$0")")"
# base="${base%/*}"
# cd "$base"

dtool=$(dirname $0)
cd "$dtool"/../syntax-highlighting
base="$PWD"

d=~/rawdisk2/sh

dhi="$d/org.kde.syntax-highlighting"
mkdir -p "$d/b" "$d/src"

errcode=0
if (( $# == 0 )); then
  ln -s "$base/data/syntax/" "$dhi"
else
  mkdir -p "$dhi/syntax"
  cd data/syntax
  for f in "$@"; do
    if [[ ! -f "$f.xml" ]]; then
      echo "$f: file not found"
      ((++errcode))
      continue
    fi

    ln -s "$PWD/$f.xml" "$dhi/syntax" || ((++errcode))
  done
  cd ../..
fi

shopt -s extglob

ln -s "$base/"!(src|CMakeLists.txt) "$d"
ln -s "$base/src/"!(CMakeLists.txt) "$d/src"

cd "$d"

sed 's#find_package(ECM 5[^ ]\+ REQUIRED NO_MODULE)#find_package(ECM 5.84.0 REQUIRED NO_MODULE)#;/include(ECMAddQch)/d' \
  "$base"/CMakeLists.txt > CMakeLists.txt

sed '/^ecm_qt_install_logging_categories/,/^)/d' \
  "$base"/src/CMakeLists.txt > src/CMakeLists.txt

cd b

echo '#!/usr/bin/env sh
set -e
cd '"$PWD"'/autotests
for name in "$@" ; do
  if [[ -r output/highlight.$name.ref ]]; then
    name=highlight.$name
  elif [[ -r output/test.$name.ref ]]; then
    name=test.$name
  fi
  echo copy $name
  cp output/$name.ref '"$base"'/autotests/reference/ || continue
  cp html.output/$name.html html.output/$name.dark.html '"$base"'/autotests/html/
  cp folding.out/$name.fold '"$base"'/autotests/folding/
done' > update-reference-data.sh

vtkate="XDG_DATA_DIRS='"$d"' LD_PRELOAD=~/game/ksyntax-trace/libKF5SyntaxHighlighting.so exec ~/game/ksyntax-trace/kate-syntax-highlighter --output-format=ansi256colors -b -t'My Breeze Dark'"

echo '#!/usr/bin/env sh
'"$vtkate"' "$@"' > hi.sh

echo '#!/usr/bin/env sh
'"$vtkate"' --stdin -s "$@"' > ihi.sh

echo '#!/usr/bin/env sh
'"$vtkate"' --syntax-trace=format "$@"' > nhi.sh

echo '#!/usr/bin/env sh
'"$vtkate"' --syntax-trace=format --stdin -s "$@"' > nihi.sh

echo '#!/usr/bin/env sh
'"$vtkate"' --syntax-trace=format --syntax-trace=stackSize "$@"' > shi.sh

echo '#!/usr/bin/env sh
'"$vtkate"' --syntax-trace=format --syntax-trace=stackSize --stdin -s "$@"' > sihi.sh

echo '#!/usr/bin/env sh
'"$vtkate"' --syntax-trace=format --syntax-trace=context --syntax-trace=stackSize "$@"' > thi.sh

echo '#!/usr/bin/env sh
'"$vtkate"' --syntax-trace=format --syntax-trace=context --syntax-trace=stackSize --stdin -s "$@"' > tihi.sh

echo '#!/usr/bin/env sh
while read l ; do echo "$l" | "$@" ; done' > unbuffered.sh

echo '#!/usr/bin/env sh
RLWRAP_HOME='"$d"' exec rlwrap ./unbuffered.sh "$@"' > rlwrap.sh

echo '#!/usr/bin/env sh
XDG_DATA_DIRS='"$d"' exec kate "$@"' > kate.sh

echo '#!/usr/bin/env sh
exec xmllint --noout --schema '"$base"'/data/schema/language.xsd "$@"' > validatehl.sh

echo '#!/usr/bin/env sh
exec cmake -DCMAKE_BUILD_TYPE=Release -DKSYNTAXHIGHLIGHTING_USE_GUI=OFF "$@" -G Ninja ..' > build.sh

echo '#!/usr/bin/env sh
./validatehl.sh syntax/* && ninja clean && ninja rebuild_cache && exec ./test.sh' > final.sh

echo '#!/usr/bin/env sh
if (( $# == 1 )); then
  ninja && XDG_DATA_DIRS='"$d"' exec ctest --output-on-failure --rerun-failed
else
  ninja && XDG_DATA_DIRS='"$d"' exec ctest --output-on-failure
fi
' > test.sh

echo '#!/usr/bin/env sh
exec '\'"$dtool"\''/increase_version.lua $(
  cd '\'"$base"\''
  git diff --stat @..master | sed -E '\''s#^ data/(syntax/[^.]+.xml).*#\1#;t;d'\''
)' > increase_versions.sh

echo '#!/usr/bin/env sh
XDG_DATA_DIRS='"$d"' exec ./bin/highlighter_benchmark' > bench_hi.sh

echo '#!/usr/bin/env sh
XDG_DATA_DIRS='"$d"' exec ./bin/repository_benchmark' > bench_repo.sh

echo '#!/usr/bin/env sh
if [[ ! -f qt.py ]]; then
  ln -s /usr/share/kdevgdb/printers/*.py .
  cat ~/.gdbinit /usr/share/kdevgdb/printers/gdbinit > gdbinit
fi
PYTHONPATH=$PWD exec gdb -q -ex source\ gdbinit -ex run --args "$@"' > gdb.sh

chmod +x update-reference-data.sh build.sh test.sh kate.sh validatehl.sh rlwrap.sh \
  hi.sh ihi.sh thi.sh tihi.sh nhi.sh nihi.sh shi.sh sihi.sh final.sh unbuffered.sh \
  increase_versions.sh bench_hi.sh bench_repo.sh gdb.sh

ln -s "$base"/autotests/input/ "$base"/data/syntax/ .

echo -e '\e[33m'
echo "cd $d/b"
echo './build'
echo './hi.sh input/<file>'
echo './test.sh'
echo './update-reference-data.sh <lang>'
echo

exit $errcode
